services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    env_file:
      - .env
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.constraints=Label(`traefik.constraint-label`, `yakhteh`)"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETS_ENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--api.dashboard=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.routers.yakhteh-traefik.rule=Host(`traefik.${MY_DOMAIN}`)"
      - "traefik.http.routers.yakhteh-traefik.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-traefik.tls=true"
      - "traefik.http.routers.yakhteh-traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.yakhteh-traefik.service=api@internal"
    networks:
      - yakhteh_net

  postgres_db:
    image: postgres:15
    container_name: yakhteh_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres-config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    ports:
      - "5432:5432"  # Expose PostgreSQL port for external database management tools
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yakhteh_net

  redis_cache:
    image: redis:7
    container_name: yakhteh_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yakhteh_net

  minio:
    image: minio/minio:latest
    container_name: yakhteh_minio
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      - "traefik.http.routers.yakhteh-minio.rule=Host(`minio.${MY_DOMAIN}`)"
      - "traefik.http.routers.yakhteh-minio.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-minio.tls=true"
      - "traefik.http.routers.yakhteh-minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-minio.loadbalancer.server.port=9001"

  auth_service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    container_name: yakhteh_auth_service
    restart: unless-stopped
    depends_on:
      - postgres_db
      - redis_cache
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    ports:
      - "8001:8000"  # For local development compatibility
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      # Main API routes
      - "traefik.http.routers.yakhteh-auth.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.yakhteh-auth.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-auth.tls=true"
      - "traefik.http.routers.yakhteh-auth.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-auth.loadbalancer.server.port=8000"
      # Main docs route (serves as default/main docs)
      - "traefik.http.routers.yakhteh-auth-docs.rule=Host(`api.${MY_DOMAIN}`) && (Path(`/docs`) || Path(`/redoc`) || PathPrefix(`/openapi.json`))"
      - "traefik.http.routers.yakhteh-auth-docs.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-auth-docs.tls=true"
      - "traefik.http.routers.yakhteh-auth-docs.tls.certresolver=letsencrypt"
      - "traefik.http.routers.yakhteh-auth-docs.service=yakhteh-auth"

  clinic_service:
    build:
      context: ./services/clinic_service
      dockerfile: Dockerfile
    container_name: yakhteh_clinic_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      # Main API routes
      - "traefik.http.routers.yakhteh-clinic.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/api/v1/clinics`)"
      - "traefik.http.routers.yakhteh-clinic.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-clinic.tls=true"
      - "traefik.http.routers.yakhteh-clinic.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-clinic.loadbalancer.server.port=8000"
      # Service-specific docs route (/inventory -> /docs)
      - "traefik.http.routers.yakhteh-clinic-docs.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/inventory`)"
      - "traefik.http.routers.yakhteh-clinic-docs.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-clinic-docs.tls=true"
      - "traefik.http.routers.yakhteh-clinic-docs.tls.certresolver=letsencrypt"
      - "traefik.http.routers.yakhteh-clinic-docs.middlewares=yakhteh-clinic-rewrite"
      - "traefik.http.routers.yakhteh-clinic-docs.service=yakhteh-clinic"
      - "traefik.http.middlewares.yakhteh-clinic-rewrite.replacepathregex.regex=^/inventory(.*)"
      - "traefik.http.middlewares.yakhteh-clinic-rewrite.replacepathregex.replacement=/docs$$1"

  membership_service:
    build:
      context: ./services/membership_service
      dockerfile: Dockerfile
    container_name: yakhteh_membership_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: ["python", "-m", "app.worker"]
    networks:
      - yakhteh_net

  scheduling_service:
    build:
      context: ./services/scheduling_service
      dockerfile: Dockerfile
    container_name: yakhteh_scheduling_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      # Main API routes
      - "traefik.http.routers.yakhteh-scheduling.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/api/v1/appointments`, `/api/v1/availability`)"
      - "traefik.http.routers.yakhteh-scheduling.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-scheduling.tls=true"
      - "traefik.http.routers.yakhteh-scheduling.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-scheduling.loadbalancer.server.port=8000"
      # Service-specific docs route (/scheduling -> /docs)
      - "traefik.http.routers.yakhteh-scheduling-docs.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/scheduling`)"
      - "traefik.http.routers.yakhteh-scheduling-docs.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-scheduling-docs.tls=true"
      - "traefik.http.routers.yakhteh-scheduling-docs.tls.certresolver=letsencrypt"
      - "traefik.http.routers.yakhteh-scheduling-docs.middlewares=yakhteh-scheduling-rewrite"
      - "traefik.http.routers.yakhteh-scheduling-docs.service=yakhteh-scheduling"
      - "traefik.http.middlewares.yakhteh-scheduling-rewrite.replacepathregex.regex=^/scheduling(.*)"
      - "traefik.http.middlewares.yakhteh-scheduling-rewrite.replacepathregex.replacement=/docs$$1"

  pacs_service:
    build:
      context: ./services/pacs_service
      dockerfile: Dockerfile
    container_name: yakhteh_pacs_service
    restart: unless-stopped
    depends_on:
      - postgres_db
      - minio
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      - "traefik.http.routers.yakhteh-pacs.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/api/v1/studies`)"
      - "traefik.http.routers.yakhteh-pacs.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-pacs.tls=true"
      - "traefik.http.routers.yakhteh-pacs.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-pacs.loadbalancer.server.port=8000"

  frontend_service:
    build:
      context: ./services/frontend_service
      dockerfile: Dockerfile
    container_name: yakhteh_frontend_service
    restart: unless-stopped
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=yakhteh"
      - "traefik.http.routers.yakhteh-frontend.rule=Host(`frontend.${MY_DOMAIN}`)"
      - "traefik.http.routers.yakhteh-frontend.entrypoints=websecure"
      - "traefik.http.routers.yakhteh-frontend.tls=true"
      - "traefik.http.routers.yakhteh-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.yakhteh-frontend.loadbalancer.server.port=80"

volumes:
  postgres_data:
  minio_data:

networks:
  yakhteh_net:
    driver: bridge

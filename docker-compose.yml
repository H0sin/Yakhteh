version: '3.9'

services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    env_file:
      - .env
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      # Cloudflare env vars removed since we're using a static certificate
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/certs:/certs:ro"
      - "traefik_acme:/acme"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${MY_DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$d5i4o.bS$$p8E9hIsLd4M809OMxkWuf."
    networks:
      - yakhteh_net

  postgres_db:
    image: postgres:15
    container_name: yakhteh_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yakhteh_net

  redis_cache:
    image: redis:7
    container_name: yakhteh_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yakhteh_net

  minio:
    image: minio/minio:latest
    container_name: yakhteh_minio
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${MY_DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      # static certificate used; no ACME resolver
      - "traefik.http.services.minio.loadbalancer.server.port=9001"

  auth_service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    container_name: yakhteh_auth_service
    restart: unless-stopped
    depends_on:
      - postgres_db
      - redis_cache
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"

  clinic_service:
    build:
      context: ./services/clinic_service
      dockerfile: Dockerfile
    container_name: yakhteh_clinic_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: ["python", "-m", "app.worker"]
    networks:
      - yakhteh_net

  membership_service:
    build:
      context: ./services/membership_service
      dockerfile: Dockerfile
    container_name: yakhteh_membership_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: ["python", "-m", "app.worker"]
    networks:
      - yakhteh_net

  scheduling_service:
    build:
      context: ./services/scheduling_service
      dockerfile: Dockerfile
    container_name: yakhteh_scheduling_service
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scheduling.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/scheduling`)"
      - "traefik.http.routers.scheduling.entrypoints=websecure"
      - "traefik.http.routers.scheduling.tls.certresolver=cloudflare"
      - "traefik.http.services.scheduling.loadbalancer.server.port=8000"

  pacs_service:
    build:
      context: ./services/pacs_service
      dockerfile: Dockerfile
    container_name: yakhteh_pacs_service
    restart: unless-stopped
    depends_on:
      - postgres_db
      - minio
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pacs.rule=Host(`api.${MY_DOMAIN}`) && PathPrefix(`/pacs`)"
      - "traefik.http.routers.pacs.entrypoints=websecure"
      - "traefik.http.routers.pacs.tls=true"
      - "traefik.http.services.pacs.loadbalancer.server.port=8000"

  frontend:
    build:
      context: ./frontend_yakhteh
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    networks:
      - yakhteh_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${MY_DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=cloudflare"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

volumes:
  postgres_data:
  minio_data:
  traefik_acme:
    driver: local

networks:
  yakhteh_net:
    driver: bridge
